From d555371c5948650609cfabe987091b211301ce77 Mon Sep 17 00:00:00 2001
From: Love Arvidsson <53595384+Love-A@users.noreply.github.com>
Date: Wed, 3 Jun 2020 12:09:08 +0200
Subject: Create Deploy-Application.ps1 Avid Sibelius


diff --git a/Deploy-Application.ps1 Avid Sibelius b/Deploy-Application.ps1 Avid Sibelius
new file mode 100644
index 0000000..bc0206c
--- /dev/null
+++ b/Deploy-Application.ps1 Avid Sibelius	
@@ -0,0 +1,240 @@
+<#
+.SYNOPSIS
+	This script performs the installation or uninstallation of an application(s).
+	# LICENSE #
+	PowerShell App Deployment Toolkit - Provides a set of functions to perform common application deployment tasks on Windows. 
+	Copyright (C) 2017 - Sean Lillis, Dan Cunningham, Muhammad Mashwani, Aman Motazedian.
+	This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. 
+	You should have received a copy of the GNU Lesser General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
+.DESCRIPTION
+	The script is provided as a template to perform an install or uninstall of an application(s).
+	The script either performs an "Install" deployment type or an "Uninstall" deployment type.
+	The install deployment type is broken down into 3 main sections/phases: Pre-Install, Install, and Post-Install.
+	The script dot-sources the AppDeployToolkitMain.ps1 script which contains the logic and functions required to install or uninstall an application.
+.PARAMETER DeploymentType
+	The type of deployment to perform. Default is: Install.
+.PARAMETER DeployMode
+	Specifies whether the installation should be run in Interactive, Silent, or NonInteractive mode. Default is: Interactive. Options: Interactive = Shows dialogs, Silent = No dialogs, NonInteractive = Very silent, i.e. no blocking apps. NonInteractive mode is automatically set if it is detected that the process is not user interactive.
+.PARAMETER AllowRebootPassThru
+	Allows the 3010 return code (requires restart) to be passed back to the parent process (e.g. SCCM) if detected from an installation. If 3010 is passed back to SCCM, a reboot prompt will be triggered.
+.PARAMETER TerminalServerMode
+	Changes to "user install mode" and back to "user execute mode" for installing/uninstalling applications for Remote Destkop Session Hosts/Citrix servers.
+.PARAMETER DisableLogging
+	Disables logging to file for the script. Default is: $false.
+.EXAMPLE
+    powershell.exe -Command "& { & '.\Deploy-Application.ps1' -DeployMode 'Silent'; Exit $LastExitCode }"
+.EXAMPLE
+    powershell.exe -Command "& { & '.\Deploy-Application.ps1' -AllowRebootPassThru; Exit $LastExitCode }"
+.EXAMPLE
+    powershell.exe -Command "& { & '.\Deploy-Application.ps1' -DeploymentType 'Uninstall'; Exit $LastExitCode }"
+.EXAMPLE
+    Deploy-Application.exe -DeploymentType "Install" -DeployMode "Silent"
+.NOTES
+	Toolkit Exit Code Ranges:
+	60000 - 68999: Reserved for built-in exit codes in Deploy-Application.ps1, Deploy-Application.exe, and AppDeployToolkitMain.ps1
+	69000 - 69999: Recommended for user customized exit codes in Deploy-Application.ps1
+	70000 - 79999: Recommended for user customized exit codes in AppDeployToolkitExtensions.ps1
+.LINK 
+	http://psappdeploytoolkit.com
+#>
+[CmdletBinding()]
+Param (
+	[Parameter(Mandatory=$false)]
+	[ValidateSet('Install','Uninstall')]
+	[string]$DeploymentType = 'Install',
+	[Parameter(Mandatory=$false)]
+	[ValidateSet('Interactive','Silent','NonInteractive')]
+	[string]$DeployMode = 'Interactive',
+	[Parameter(Mandatory=$false)]
+	[switch]$AllowRebootPassThru = $false,
+	[Parameter(Mandatory=$false)]
+	[switch]$TerminalServerMode = $false,
+	[Parameter(Mandatory=$false)]
+	[switch]$DisableLogging = $false
+)
+
+Try {
+	## Set the script execution policy for this process
+	Try { Set-ExecutionPolicy -ExecutionPolicy 'ByPass' -Scope 'Process' -Force -ErrorAction 'Stop' } Catch {}
+	
+	##*===============================================
+	##* VARIABLE DECLARATION
+	##*===============================================
+	## Variables: Application
+	[string]$appVendor = ''
+	[string]$appName = 'Sibelius'
+	[string]$appVersion = ''
+	[string]$appArch = ''
+	[string]$appLang = 'EN'
+	[string]$appRevision = '01'
+	[string]$appScriptVersion = '1.0.0'
+	[string]$appScriptDate = '02/18/2019'
+	[string]$appScriptAuthor = 'NKPG LA'
+	##*===============================================
+	## Variables: Install Titles (Only set here to override defaults set by the toolkit)
+	[string]$installName = ''
+	[string]$installTitle = ''
+	
+	##* Do not modify section below
+	#region DoNotModify
+	
+	## Variables: Exit Code
+	[int32]$mainExitCode = 0
+	
+	## Variables: Script
+	[string]$deployAppScriptFriendlyName = 'Deploy Application'
+	[version]$deployAppScriptVersion = [version]'3.7.0'
+	[string]$deployAppScriptDate = '02/13/2018'
+	[hashtable]$deployAppScriptParameters = $psBoundParameters
+	
+	## Variables: Environment
+	If (Test-Path -LiteralPath 'variable:HostInvocation') { $InvocationInfo = $HostInvocation } Else { $InvocationInfo = $MyInvocation }
+	[string]$scriptDirectory = Split-Path -Path $InvocationInfo.MyCommand.Definition -Parent
+	
+	## Dot source the required App Deploy Toolkit Functions
+	Try {
+		[string]$moduleAppDeployToolkitMain = "$scriptDirectory\AppDeployToolkit\AppDeployToolkitMain.ps1"
+		If (-not (Test-Path -LiteralPath $moduleAppDeployToolkitMain -PathType 'Leaf')) { Throw "Module does not exist at the specified location [$moduleAppDeployToolkitMain]." }
+		If ($DisableLogging) { . $moduleAppDeployToolkitMain -DisableLogging } Else { . $moduleAppDeployToolkitMain }
+	}
+	Catch {
+		If ($mainExitCode -eq 0){ [int32]$mainExitCode = 60008 }
+		Write-Error -Message "Module [$moduleAppDeployToolkitMain] failed to load: `n$($_.Exception.Message)`n `n$($_.InvocationInfo.PositionMessage)" -ErrorAction 'Continue'
+		## Exit the script, returning the exit code to SCCM
+		If (Test-Path -LiteralPath 'variable:HostInvocation') { $script:ExitCode = $mainExitCode; Exit } Else { Exit $mainExitCode }
+	}
+	
+	#endregion
+	##* Do not modify section above
+	##*===============================================
+	##* END VARIABLE DECLARATION
+	##*===============================================
+		
+	If ($deploymentType -ine 'Uninstall') {
+		##*===============================================
+		##* PRE-INSTALLATION
+		##*===============================================
+		[string]$installPhase = 'Pre-Installation'
+
+		## Show Welcome Message, close Internet Explorer if required, allow up to 3 deferrals, verify there is enough disk space to complete the install, and persist the prompt
+		##Show-InstallationWelcome -CloseApps 'iexplore' -AllowDefer -DeferTimes 3 -CheckDiskSpace -PersistPrompt
+		
+		## Show Progress Message (with the default message)
+		##Show-InstallationProgress
+		
+		## <Perform Pre-Installation tasks here>
+		
+		
+		##*===============================================
+		##* INSTALLATION 
+		##*Execute-Process -Path "$dirFiles\Namn" -Parameters '-Silent' -WindowStyle 'Hidden'
+		##*Execute-MSI -Action Install -Path "MSI" -Transform "Adobe Flash Player 31 ActiveX.mst" -Parameters '/QN'
+		##*===============================================
+		[string]$installPhase = 'Installation'
+		
+		## Handle Zero-Config MSI Installations
+		If ($useDefaultMsi) {
+			[hashtable]$ExecuteDefaultMSISplat =  @{ Action = 'Install'; Path = $defaultMsiFile }; If ($defaultMstFile) { $ExecuteDefaultMSISplat.Add('Transform', $defaultMstFile) }
+			Execute-MSI @ExecuteDefaultMSISplat; If ($defaultMspFiles) { $defaultMspFiles | ForEach-Object { Execute-MSI -Action 'Patch' -Path $_ } }
+		}
+		
+		## <Perform Installation tasks here>
+		
+        #Sibelius
+		Execute-MSI -Action Install -Path "$dirFiles\Sibelius\sibelius.msi" -parameters '/qn'
+        #Avid Fonts
+        Execute-MSI -Action Install -Path "$dirFiles\Avid SB OTF Fonts\OTFFontInstaller.msi" -parameters '/qn'
+        #Avid Link
+        Execute-MSI -Action Install -Path "$dirFiles\Avid Link\Avid Link.msi" -parameters '/qn'
+        #UpdateSharedRegCount
+        Execute-MSI -Action Install -Path "$dirFiles\UpdateSharedRegCount\UpdateSharedRegCount.msi" -parameters '/qn'
+
+        #VCRedist
+        If ((Get-CimInstance -ClassName win32_operatingsystem).OSArchitecture -eq "64 Bitar")
+        { Execute-Process -Path "$dirFiles\Avid SB VC Redist 2008 x64\vcredist_2008_x64.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638' 
+            Execute-Process -Path "$dirFiles\Avid SB VC Redist 2010 x64\vcredist_2010_x64.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638'
+                Execute-Process -Path "$dirFiles\Avid SB VC Redist 2017 x64\vcredist_2017_x64.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638' }
+        Else
+        { Execute-Process -Path "$dirFiles\Avid SB VC Redist 2008 x86\vcredist_2008_x86.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638'
+            Execute-Process -Path "$dirFiles\Avid SB VC Redist 2010 x86\vcredist_2010_x86.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638'
+                Execute-Process -Path "$dirFiles\Avid SB VC Redist 2017 x86\vcredist_2017_x86.exe" -Parameters '/q /norestart' -WindowStyle 'Hidden' -IgnoreExitCodes '1638'}
+        
+        #Execute-Process -Path "$dirFiles\Avid Link Desktop\AvidLinkSetup.exe" -Parameters '/S' -WindowStyle 'Hidden'
+        
+        
+		
+		##*===============================================
+		##* POST-INSTALLATION
+		##*===============================================		
+		[string]$installPhase = 'Post-Installation'
+		
+		## <Perform Post-Installation tasks here>
+		
+		## Display a message at the end of the install
+		##If (-not $useDefaultMsi) { Show-InstallationPrompt -Message 'You can customize text to appear at the end of an install or remove it completely for unattended installations.' -ButtonRightText 'OK' -Icon Information -NoWait }
+	}
+	ElseIf ($deploymentType -ieq 'Uninstall')
+	{
+		##*===============================================
+		##* PRE-UNINSTALLATION
+		##*===============================================
+		[string]$installPhase = 'Pre-Uninstallation'
+		
+		## Show Welcome Message, close Internet Explorer with a 60 second countdown before automatically closing
+		##Show-InstallationWelcome -CloseApps 'iexplore' -CloseAppsCountdown 60
+		
+		## Show Progress Message (with the default message)
+		##Show-InstallationProgress
+		
+		## <Perform Pre-Uninstallation tasks here>
+		
+		
+		##*===============================================
+		##* UNINSTALLATION
+		##*Execute-Process -Path "*.exe" -Parameters '/s'
+		##*Execute-MSI -Action 'Uninstall' -Path 'Msi Sträng' -Parameter '/QN'
+		##*Remove-MSIApplications -Name 'Msi Namn'
+		##*===============================================
+		[string]$installPhase = 'Uninstallation'
+				
+		## Handle Zero-Config MSI Uninstallations
+		If ($useDefaultMsi) {
+			[hashtable]$ExecuteDefaultMSISplat =  @{ Action = 'Uninstall'; Path = $defaultMsiFile }; If ($defaultMstFile) { $ExecuteDefaultMSISplat.Add('Transform', $defaultMstFile) }
+			Execute-MSI @ExecuteDefaultMSISplat
+		}
+		
+		# <Perform Uninstallation tasks here>
+		
+		#Sibelius
+        Execute-MSI -Action 'Uninstall' -Path '{62892434-57A6-44E7-9C58-7C248DE6181D}' -Parameter '/qn'
+        #Sibelius OpenTypeFonts
+        Execute-MSI -Action 'Uninstall' -Path '{603AEE7A-6967-4CDB-8528-0CAC729A004B}' -Parameter '/qn'
+        #Avid Link
+        Execute-MSI -Action 'Uninstall' -Path '{4865F211-1BDF-42B1-A863-EA828CA43431}' -Parameter '/qn'
+        
+        
+		
+		##*===============================================
+		##* POST-UNINSTALLATION
+		##*===============================================
+		[string]$installPhase = 'Post-Uninstallation'
+		
+		## <Perform Post-Uninstallation tasks here>
+		
+		
+	}
+	
+	##*===============================================
+	##* END SCRIPT BODY
+	##*===============================================
+	
+	## Call the Exit-Script function to perform final cleanup operations
+	Exit-Script -ExitCode $mainExitCode
+}
+Catch {
+	[int32]$mainExitCode = 60001
+	[string]$mainErrorMessage = "$(Resolve-Error)"
+	Write-Log -Message $mainErrorMessage -Severity 3 -Source $deployAppScriptFriendlyName
+	Show-DialogBox -Text $mainErrorMessage -Icon 'Stop'
+	Exit-Script -ExitCode $mainExitCode
+}
